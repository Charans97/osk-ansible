# ---------------- Java Section ----------------
- name: Ensure Java install directory exists
  file:
    path: "{{ install_dir }}/java"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Extract Java tarball
  unarchive:
    src: "{{ java_package }}"
    dest: "{{ install_dir }}/java"
    remote_src: no

- name: Detect JDK directory
  find:
    paths: "{{ install_dir }}/java"
    file_type: directory
    patterns: "jdk-*"
  register: jdk_dir

- name: Set JAVA_HOME fact
  set_fact:
    java_home: "{{ jdk_dir.files[0].path }}"

- name: Write JAVA_HOME and PATH to profile
  copy:
    dest: /etc/profile.d/java.sh
    mode: 0755
    content: |
      export JAVA_HOME={{ java_home }}
      export PATH=$JAVA_HOME/bin:$PATH

# ---------------- Kafka Section ----------------
- name: Create Kafka install dir
  file:
    path: "{{ install_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Extract Kafka tarball
  unarchive:
    src: "{{ kafka_tarball }}"
    dest: "{{ install_dir }}"
    remote_src: no
    extra_opts: [--strip-components=1]

# ---------------- SSL Section ----------------
- name: Copy CA files
  copy:
    src: "{{ item }}"
    dest: "{{ install_dir }}/config/"
    mode: 0600
  with_items:
    - ca.crt
    - ca.key
  when: ssl.enabled | default(false)

- name: Cleanup old keystore/truststore
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ install_dir }}/config/kafka.keystore.jks"
    - "{{ install_dir }}/config/kafka.truststore.jks"
    - "{{ install_dir }}/config/kafka.csr"
    - "{{ install_dir }}/config/cert-signed"
    - "{{ install_dir }}/config/cert-file"
  when: ssl.enabled | default(false)

- name: Deploy SSL generation script
  template:
    src: ssl-generate.sh.j2
    dest: "{{ install_dir }}/config/ssl-generate.sh"
    mode: 0755
  when: ssl.enabled | default(false)

- name: Generate SSL keystore/truststore
  command: "{{ install_dir }}/config/ssl-generate.sh"
  environment:
    JAVA_HOME: "{{ java_home }}"
    PATH: "{{ java_home }}/bin:{{ ansible_env.PATH }}"
  args:
    chdir: "{{ install_dir }}/config"
  when: ssl.enabled | default(false)

# ---------------- Kafka Config Section ----------------
- name: Configure Kafka server.properties
  template:
    src: server.properties.j2
    dest: "{{ install_dir }}/config/server.properties"
    mode: 0644
  notify:
    - restart kafka

# ---------------- Kafka User & Permissions ----------------
- name: Ensure kafka group exists
  group:
    name: kafka
    state: present

- name: Ensure kafka user exists
  user:
    name: kafka
    group: kafka
    shell: /bin/false
    create_home: yes
    system: yes
    state: present

# ---------------- Directories ----------------
- name: Ensure Kafka lib and log dirs exist
  file:
    path: "{{ item }}"
    state: directory
    owner: kafka
    group: kafka
    mode: 0755
  loop:
    - /var/lib/kafka
    - /var/log/kafka

# ---------------- Migration (only once) ----------------
- name: Check if old log dir exists
  stat:
    path: /opt/kafka/logs
  register: old_logs

- name: Migrate Kafka data from /opt/kafka/logs to /var/lib/kafka
  command: rsync -a /opt/kafka/logs/ /var/lib/kafka/
  when: old_logs.stat.exists and old_logs.stat.isdir
  become: yes

- name: Remove old /opt/kafka/logs directory
  file:
    path: /opt/kafka/logs
    state: absent
  when: old_logs.stat.exists
  become: yes

- name: Change ownership of Kafka directories
  file:
    path: "{{ item }}"
    owner: kafka
    group: kafka
    recurse: yes
  loop:
    - /opt/kafka
    - /var/lib/kafka
    - /var/log/kafka

# ---------------- Systemd Section ----------------
- name: Configure Kafka systemd service
  template:
    src: kafka.service.j2
    dest: /etc/systemd/system/kafka.service
    mode: 0644

- name: Reload systemd
  command: systemctl daemon-reload
  become: yes

# ---------------- Cluster ID & Storage Formatting ----------------
- name: Check if cluster.id exists in meta.properties
  command: grep '^cluster.id' /var/lib/kafka/meta.properties
  register: meta_cluster_id
  ignore_errors: yes

- name: Extract existing cluster.id
  set_fact:
    cluster_id: "{{ meta_cluster_id.stdout.split('=')[1] | trim }}"
  when: meta_cluster_id.rc == 0

- name: Generate new cluster.id (only if no meta.properties found on first broker)
  command: "{{ install_dir }}/bin/kafka-storage.sh random-uuid"
  register: cluster_id_result
  when: meta_cluster_id.rc != 0 and inventory_hostname == groups['brokers'][0]
  run_once: true

- name: Save cluster_id fact
  set_fact:
    cluster_id: "{{ cluster_id_result.stdout | default(cluster_id) }}"

- name: Format Kafka storage directories
  command: >
    {{ install_dir }}/bin/kafka-storage.sh format
    --ignore-formatted
    --cluster-id {{ cluster_id }}
    -c {{ install_dir }}/config/server.properties
  args:
    creates: "{{ install_dir }}/logs/__cluster_metadata-0"
  environment:
    JAVA_HOME: "{{ java_home }}"
    PATH: "{{ java_home }}/bin:{{ ansible_env.PATH }}"

# ---------------- Start Kafka ----------------
- name: Enable and start Kafka broker
  systemd:
    name: kafka
    state: started
    enabled: yes
  become: yes

#..............connect............
- name: Deploy Kafka Connect
  include_tasks: connect.yml
  when: kafka_role == "connect"

#..............mm2................
#- name: Deploy Kafka MirrorMaker2
#  include_tasks: mm2.yml
#  when: kafka_role == "mm2"
