# ---------------- Java Section ----------------
- name: Ensure Java install directory exists
  file:
    path: "{{ install_dir }}/java"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Extract Java tarball
  unarchive:
    src: "{{ java_package }}"
    dest: "{{ install_dir }}/java"
    remote_src: no

- name: Detect JDK directory
  find:
    paths: "{{ install_dir }}/java"
    file_type: directory
    patterns: "jdk-*"
  register: jdk_dir

- name: Set JAVA_HOME fact
  set_fact:
    java_home: "{{ jdk_dir.files[0].path }}"

- name: Write JAVA_HOME and PATH to profile
  copy:
    dest: /etc/profile.d/java.sh
    mode: 0755
    content: |
      export JAVA_HOME={{ java_home }}
      export PATH=$JAVA_HOME/bin:$PATH

# ---------------- Kafka Section ----------------
- name: Create Kafka install dir
  file:
    path: "{{ install_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Extract Kafka tarball
  unarchive:
    src: "{{ kafka_tarball }}"
    dest: "{{ install_dir }}"
    remote_src: no
    extra_opts: [--strip-components=1]

# ---------------- SSL Section ----------------
- name: Copy CA files
  copy:
    src: "{{ item }}"
    dest: "{{ install_dir }}/config/"
    mode: 0600
  with_items:
    - ca.crt
    - ca.key
  when: ssl.enabled | default(false)

- name: Cleanup old keystore/truststore
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ install_dir }}/config/kafka.keystore.jks"
    - "{{ install_dir }}/config/kafka.truststore.jks"
    - "{{ install_dir }}/config/kafka.csr"
    - "{{ install_dir }}/config/cert-signed"
    - "{{ install_dir }}/config/cert-file"
  when: ssl.enabled | default(false)

- name: Deploy SSL generation script
  template:
    src: ssl-generate.sh.j2
    dest: "{{ install_dir }}/config/ssl-generate.sh"
    mode: 0755
  when: ssl.enabled | default(false)

- name: Generate SSL keystore/truststore
  command: "{{ install_dir }}/config/ssl-generate.sh"
  environment:
    JAVA_HOME: "{{ java_home }}"
    PATH: "{{ java_home }}/bin:{{ ansible_env.PATH }}"
  args:
    chdir: "{{ install_dir }}/config"
  when: ssl.enabled | default(false)

# ---------------- Kafka Config Section ----------------
- name: Configure Kafka server.properties
  template:
    src: server.properties.j2
    dest: "{{ install_dir }}/config/server.properties"
    mode: 0644
  notify:
    - restart kafka

# ---------------- Systemd Section ----------------
- name: Configure Kafka systemd service
  template:
    src: kafka.service.j2
    dest: /etc/systemd/system/kafka.service
    mode: 0644

- name: Reload systemd
  command: systemctl daemon-reload
  become: yes

# ---------------- Cluster ID & Storage Formatting ----------------
- name: Generate cluster.id (only on kafka1)
  command: >
    /opt/kafka/bin/kafka-storage.sh random-uuid
  environment:
    JAVA_HOME: "{{ java_home }}"
    PATH: "{{ java_home }}/bin:{{ ansible_env.PATH }}"
  register: cluster_id_result
  delegate_to: kafka1
  run_once: true

- name: Save cluster.id to controller node
  copy:
    content: "{{ cluster_id_result.stdout }}"
    dest: "/tmp/kafka-cluster-id"
  delegate_to: kafka1
  run_once: true

# 2. Fetch cluster.id from kafka1 to controller
- name: Fetch cluster.id to Ansible controller
  fetch:
    src: "/tmp/kafka-cluster-id"
    dest: "/tmp/kafka-cluster-id"
    flat: yes
  delegate_to: kafka1
  run_once: true

# 3. Distribute cluster.id to all brokers
- name: Copy cluster.id to all brokers
  copy:
    src: "/tmp/kafka-cluster-id"
    dest: "/opt/kafka/cluster.id"

# 4. Clean old metadata (optional, only if mismatch happens)
- name: Clean old Kafka metadata logs
  file:
    path: "{{ install_dir }}/logs"
    state: absent
  when: wipe_metadata | default(false)

# 5. Format storage with shared cluster.id
# 5a. Read cluster.id into a fact
- name: Read cluster.id
  slurp:
    src: /opt/kafka/cluster.id
  register: cluster_id_file

- name: Set cluster_id fact
  set_fact:
    cluster_id: "{{ cluster_id_file.content | b64decode | trim }}"

# 5b. Format storage with shared cluster.id
- name: Format Kafka storage directories
  command: >
    /opt/kafka/bin/kafka-storage.sh format
    --ignore-formatted
    --cluster-id {{ cluster_id }}
    -c /opt/kafka/config/server.properties
  args:
    creates: "{{ install_dir }}/logs/__cluster_metadata-0"
  environment:
    JAVA_HOME: "{{ java_home }}"
    PATH: "{{ java_home }}/bin:{{ ansible_env.PATH }}"

# ---------------- Start Kafka ----------------
- name: Enable and start Kafka broker
  systemd:
    name: kafka
    state: started
    enabled: yes
  become: yes

